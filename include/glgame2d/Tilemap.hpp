#pragma once

#include <string>
#include <vector>

#include "glgame2d/Renderer.hpp"


namespace glgame2d {


class Tilemap
{
private:
    using TileGID = int;

    struct Tileset {
        Tileset(TileGID firstgid, const std::string& image, int columns, int rows,
            int imagewidth, int imageheight, int tilecount)
            : firstgid{ firstgid },
            texture{ image.c_str() },
            image{ image },
            columns{ columns }, rows{ rows },
            imagewidth{ imagewidth }, imageheight{ imageheight },
            tilecount{ tilecount }
        {
        }

        TileGID firstgid;
        Texture texture;
        std::string image;
        int columns, rows;
        int imagewidth, imageheight;
        int tilecount;
    };

    struct TileObject {
        TileObject(TileGID tilegid, int width, int height, int x, int y)
            : tilegid{ tilegid },
            width{ width }, height{ height},
            x{ x }, y{ y }
        {
        }

        TileGID tilegid;
        int width, height;
        int x, y;
    };

public:
    /**
     * @brief Construct a new Tilemap object by loading a tilemap created with Tiled Map Editor.
     * 
     * @param tilemapPath Path to the JSON tilemap file generated by Tiled
     */
    Tilemap(const char* tilemapPath);

    /**
     * @brief Render the tilemap to the screen.
     * 
     * @param renderer Renderer to use for rendering
     */
    void render(const Renderer& renderer) const;
    
private:
    const Tileset& getTilesetByGID(TileGID gid) const;
    static glm::vec4 computeTileUV(const Tileset& tileset, TileGID gid);
    void renderTileFromTileset(
        const Renderer& renderer, const Tileset& tileset,
        const glm::vec4& uvRect, const glm::vec2& position) const;

private:
    struct {
        int width, height;
        int tileWidth, tileHeight;
        int layerCount;
    } m_MapInfo;
    std::vector<Tileset> m_Tilesets;
    std::vector<std::vector<TileGID>> m_TileLayers;
    std::vector<std::vector<TileObject>> m_ObjectLayers;
};


} // namespace glgame2d
